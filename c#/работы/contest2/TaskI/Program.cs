using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/// Норма производства - n деталей в день. За каждую деталь работник получает k рублей. Если работник произвёл меньше нормы, 
/// то за каждую не сделанную деталь работник будет оштрафован на k/2 рублей. За каждую деталь, что было произведено сверх нормы, 
/// работник получает 5/4 k рублей.
/// Напишите программу, которая вычисляет зарплату работника за m месяцев по t рабочих дней.
/// На вход подаётся 5 чисел: 
/// Целые числа: 
/// n – норма производства деталей в день в диапазоне[10;100] 
/// k – плата за сделанную деталь в диапазоне[50;100] 
/// r – количество деталей, которое произвёл работник за день в диапазоне[1;200] 
/// m месяцев работы в диапазоне[2;10] 
/// t рабочих дней в месяце в диапазоне[5;30] 
/// Одно вещественное число – зарплата работника за m месяцев и t рабочих дней.

namespace TaskI
{
	class Program
	{
		/// <summary>
		/// Метод принимает на вход норму выполнения работы, цену за одну деталь, выполненную работу, количество рабочих месяцев и количество
		/// рабочих дней в одном месяце, затем с использованием условного оператора if вычисляет зарплату в зависимости от пере\недоработки,
		/// потом возвращает вычисленное значение.
		/// </summary>
		/// <param name="normDetails"> Переменная для нормы производства деталей. </param>
		/// <param name="price"> Переменная для цены за одну деталь. </param>
		/// <param name="actualDetails"> Переменная для фактического количества сделанных деталей. </param>
		/// <param name="months"> Переменная для количества рабочих месяцев. </param>
		/// <param name="days"> Переменная для количества рабочих дней в одном месяце. </param>
		/// <returns></returns>

		static double Salary(uint normDetails, uint price, uint actualDetails, uint months, uint days)
		{
			// Переменная вещественного типа для зарплаты.

			double salary = 0;

			// Проверка на переработку\недоработку, если норма выполнения равна количеству произведенных деталей, зарплата вычисляется просто.

			if (normDetails == actualDetails)
			{
				salary = price * actualDetails * months * days;
			}
			else
			{
				// В случае недоработки зарплата вычисляется с учетом штрафа за каждую несделанную деталь.

				if (normDetails > actualDetails)
				{
					salary = (price * actualDetails - 0.5 * price * (normDetails - actualDetails)) * months * days;
				}
				else
				{
					// В случае переработки зарплата вычисляется с учетом надбавки за каждую перевыполненную деталь.

					salary = (price * normDetails + 1.25 * price * (actualDetails - normDetails)) * months * days;
				}
			}

			// Выводится вычисленное значение зарплаты.

			return salary;
		}

		/// <summary>
		/// Метод принимает через ref 5 переменных целочисленного беззнакового типа, во вложенных условных операторах if считывает их и 
		/// проверяет корректность входных данных.
		/// </summary>
		/// <param name="normOfProductivity"> Переменная для нормы выполнения деталей. </param>
		/// <param name="price"> Переменная для платы за одну деталь. </param>
		/// <param name="actualProductivity"> Переменная для фактически сделанного числа деталей. </param>
		/// <param name="months"> Переменная для количества рабочих месяцев. </param>
		/// <param name="days"> Переменная для количества рабочих дней. </param>
		/// <returns> Метод возвращает булевое true, если все данные введены корректно, иначе - false. </returns>

		static bool InputCheck(ref uint normOfProductivity, ref uint price, ref uint actualProductivity, ref uint months, ref uint days)
		{
			// Переменные булевого типа для проверки корректности ввода нормы производства, цены, фактического производства, месяцев и дней.

			bool readNorm, readPrice, readActual, readMonths, readDays;

			// Вызов метода чтения для переменной нормы выполнения работы.

			normOfProductivity = Read(out readNorm);

			// Проверка корректности данных: число целое и в интервале [10;100].

			if (readNorm && normOfProductivity > 9 && normOfProductivity < 101)
			{
				// Вызов метода чтения для переменной цены за деталь.

				price = Read(out readPrice);

				// Проверка корректности данных: число целое и в интервале [50;100].

				if (readPrice && price > 49 && price < 101)
				{
					// Вызов метода чтения для переменной фактически сделанных деталей.

					actualProductivity = Read(out readActual);

					// Проверка корректности данных: число целое и в интервале [1;200].

					if (readActual && actualProductivity > 0 && actualProductivity < 201)
					{
						// Вызов метода чтения для переменной месяцев.

						months = Read(out readMonths);

						// Проверка корректности данных: число целое и в интервале [2;10].

						if (readMonths && months > 1 && months < 11)
						{
							// Вызов метода чтения для переменной дней.

							days = Read(out readDays);

							// Проверка корректности данных: число целое и в интервале [5;30].

							if (readDays && days > 4 && days < 31)
							{
								// Если все данные введены корректно, метод возвращает булевое true.

								return true;
							}
						}
					}
				}
			}

			// Если какие-либо данные введены некорректно, метод возвращает булевое false.

			return false;
		}

		/// <summary>
		/// Метод считывает строку и пытается преобразовать ее переменную целочисленного беззнакового типа
		/// с помощью метода TryParse, возвращает через return значение переменной и через out переменную булевого типа, показывающую,
		/// удалось ли преобразование (корректны ли входные данные).
		/// </summary>
		/// <param name="input"> Считываемая переменная. </param>
		/// <param name="readIn"> Переменная булевого типа, отражающая корректность вводных данных для переменной. </param>
		/// <returns> In - считываемую переменную. /returns>

		static uint Read(out bool readIn)
		{
			uint input;
			readIn = uint.TryParse(Console.ReadLine(), out input);
			return input;
		}

		/// <summary>
		/// Объявляются переменные для входных данных, вызывается метод, считывающий их и проверяющий их корректность, если данные введены 
		/// правильно, вызывается метод рассчета зарплаты и выводится его результат с точностью 3 знака после запятой, иначе выводится строка
		/// wrong и работа программы завершается.
		/// </summary>

		static void Main(string[] args)
		{
			// Переменные целочисленного беззнакового типа для нормы производства, цены за деталь, фактического производства, месяцев и дней.

			uint normOfProductivity = 0, price = 0, actualProductivity = 0, months = 0, days = 0;

			// Вызов метода проверки корректности вводимых данных в условном операторе if и различный вывод в зависимости от этого.

			if (InputCheck(ref normOfProductivity, ref price, ref actualProductivity, ref months, ref days))
			{
				// Если данные введены корректно, вызывается метод рассчета зарплаты и его результат выводится с точностью 3 знака после запятой.

				Console.WriteLine($"{Salary(normOfProductivity, price, actualProductivity, months, days):F3}");
			}
			else
			{
				// Если данные введены неверно, выводится строка wrong и работа программы завершается.

				Console.WriteLine("wrong");
			}
		}
	}
}
