using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/// напишите метод Sin, принимающий на вход два значения: параметр функции x типа double и точность вычисления N типа 
/// int, а возвращающий значение функции в точке x типа double. 
/// static double Sin(double x, int N)
/// Для вычисления синуса используйте разложение в ряд Тейлора:
/// В первой строке вводится действительное число x ∈ [-1000; 1000] – параметр синуса. Во второй строке вводится целое
/// положительное число N, не превышающее 1000 – номер члена ряда, до которого требуется разложение.
/// Выведите единственное число: значение синуса, вычисленное Вашей функцией с данными параметрами.
/// Число выводить с точностью до трёх знаков после запятой.

namespace TaskD
{
	class Program
	{
		/// <summary>
		/// Метод по входным значениям аргумента X и точности N вычисляет синус от аргумента с помощью ряда Тейлора, считая его с точностью до Nного элемента.
		/// </summary>
		/// <param name="x"> Переменная для аргумента вычисления синуса. </param>
		/// <param name="N"> Переменная для значения точности вычисления ряда Тейлора. </param>
		/// <returns> Метод вызвращает значение синуса для данного элемента с данной точностью. </returns>

		static double Sin(double x, int N)
		{
			// Переменная для ряда Тейлора - суммы элементов, пересчитываемых на каждой итерации.

			double taylor = x;

			// Переменная для пересчета каждого слагаемого.

			double add = x;

			// Цикл от 1 до N -1, в котором на каждой итерации к сумме ряда прибавляется по одному слагаемому.

			for (int i = 1; i < N; i++)
			{
				add *= (-1) * (x * x) / (2 * i) / (2 * i + 1);
				taylor += add;

			}

			return taylor;
		}

		/// <summary>
		/// Метод считывает строку и пытается преобразовать ее переменную вещественного типа
		/// с помощью метода TryParse, возвращает через return значение переменной и через out переменную булевого типа, показывающую,
		/// удалось ли преобразование (корректны ли входные данные).
		/// </summary>
		/// <param name="input"> Считываемая переменная. </param>
		/// <param name="readIn"> Переменная булевого типа, отражающая корректность вводных данных для переменной. </param>
		/// <returns> In - считываемую переменную. /returns>

		static double ReadDouble(out bool readIn)
		{
			double input;
			readIn = double.TryParse(Console.ReadLine(), out input);
			return input;
		}

		/// <summary>
		/// Метод считывает строку и пытается преобразовать ее переменную целочисленного типа
		/// с помощью метода TryParse, возвращает через return значение переменной и через out переменную булевого типа, показывающую,
		/// удалось ли преобразование (корректны ли входные данные).
		/// </summary>
		/// <param name="input"> Считываемая переменная. </param>
		/// <param name="readIn"> Переменная булевого типа, отражающая корректность вводных данных для переменной. </param>
		/// <returns> Метод возвращает input - считываемую переменную. /returns>

		static int ReadInt(out bool readIn)
		{
			int input;
			readIn = int.TryParse(Console.ReadLine(), out input);
			return input;
		}

		/// <summary>
		/// Объявляются переменные для вводимых данных - аргумент и точность, переменные для проверки корректности вводимых данных и переменная для ответа.
		/// Вызывается метод считывания данных для первой переменной, затем проверка корректности данных условным оператором if: если данные некорректные - 
		/// программа завершает работу, если данные корректны - считывается и проверяется вторая переменная. Если все введенные данные соответствуют условию,
		/// вызывается метод вычисления синуса через ряд тейлора (к нему приравнивается переменная ответа), затем переменная ответа выводится с точностью 3
		/// знака после запятой.
		/// </summary>

		static void Main(string[] args)
		{
			// Переменная для входных данных - точности вычисления синуса, целое число от 1 до 1000.

			int accuracy;

			// Переменная для входных данных - аргумента для синуса, вещественное число от -1000 до 1000.

			double arguement;

			// Переменные булевого типа для проверки правильности вводимых данных.

			bool readAccuracy, readArguement;

			// Вызов метода считывания данных с консоли.

			arguement = ReadDouble(out readArguement);

			// Проверка правильности введенных данных: типа и величины.

			if (readArguement && arguement >= -1000 && arguement <= 1000)
			{
				// Вызов метода считывания данных с консоли.

				accuracy = ReadInt(out readAccuracy);

				// Проверка правильности введенных данных: типа и величины.

				if (readAccuracy && accuracy > 0 && accuracy < 1001)
				{
					// Вызов метода, вычисляющего синус и вывод ответа с точностью 3 знака после запятой.

					Console.WriteLine($"{Sin(arguement, accuracy):F3}");
				}
			}
		}
	}
}
