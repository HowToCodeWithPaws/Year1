using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/// Транспортировка на автобусе стоит 1200 рублей. Для типа транспортировки “taxi” действует скидка 20% при поездке от 1500 рублей. 
/// Наши студенты живут в мире, в котором есть купюры только по 500, 200 и 100 рублей. Посчитать минимальное количество купюр, 
/// которыми каждый студент может расплатиться за транспортировку, если студент хочет переплатить минимально возможное количество денег. 
/// Если студент не едет на посвят, ничего не выводить.
/// В первой строке вводится n в диапазоне [1, 100000] – количество студентов. В каждой последующей строке вводится тип транспортировки 
/// до посвята: “bus”, “taxi”, “none”, если тип транспортировки – taxi, указывается стоимость такси в новой строке – положительное целое 
/// число в диапазаоне [1, 1000000].
/// Для каждого студента, едущего на посвят, вывести одно число - минимальное количество купюр При любых отклонениях от указанных входных 
/// данных вывести “wrong” и завершить выполнение программы.

namespace TaskA
{
	class Program
	{
		/// <summary>
		/// Метод вызывает метод чтения для переменной цены проезда на такси и проверяет корректность входных данных, если они некорректны -
		/// возвращает wrong, иначе рассчитывает количество купюр с помощью циклов while и вложенных условных операторов if, затем выводит
		/// строку с ответом через out.
		/// </summary>
		/// <param name="result"> Переменная для вывода получившегося ответа - числа купюр, если вводимая цена верна, или wrong, если 
		/// вводимая цена неверна. </param>

		static void TaxiBanknotes(out string result)
		{
			// Переменная для числа необходимых банкнот - целое беззнаковое число.

			uint numberOfBanknotes = 0;

			// Переменная булевого типа для проверки корректности вводных данных для стоимости проезда на такси.

			bool readCost;


			// Переменная для стоимости проезда на такси, вызов метода чтения для нее.

			uint cost = Read(out readCost);

			// Проверка корректности вводных данных: цена проезда - это целое число от 1 до 1000000.

			if (readCost && cost > 0 && cost < 1000001)
			{
				// Проверка наличия скидки.

				if (cost > 1500)
				{
					cost = (uint)Math.Ceiling(0.8 * cost);
				}

				// Из стоимости в цикле while вычитается максимально возможное количество 500 р, к количеству банкнот прибавляется по 1.

				while (cost / 500 > 0)
				{
					cost -= 500;
					numberOfBanknotes += 1;
				}

				// Оставшуюся цену - от 0 до 499 - в разных случаях выгоднее отдавать разными купюрами.

				if (cost > 400)
				{
					// Если сумма от 401 до 499 - одна купюра в 500 р.

					numberOfBanknotes += 1;
				}
				else
				{
					if (cost > 200)
					{
						// Если сумма от 201 до 400 - 2 купюры (200 и 100 до 301 р или 200 и 200 после 301 р).

						numberOfBanknotes += 2;
					}
					else
					{
						if (cost > 0)
						{
							// Если сумма меньше 201 но больше 0 - одна купюра (100 р до 101р или 200 р от 101 до 200 р).

							numberOfBanknotes += 1;
						}

					}
				}

				// Выводящийся через out результат приравнивается к переменной числа банкнот, приведенной к типу string методом ToString.

				result = numberOfBanknotes.ToString();
			}
			else
			{
				// Если входные данные некорректны, результат приравнивается к строке wrong.

				result = "wrong";
			}
		}

		/// <summary>
		/// Метод считывает строку и пытается преобразовать ее переменную целочисленного беззнакового типа
		/// с помощью метода TryParse, возвращает через return значение переменной и через out переменную булевого типа, показывающую,
		/// удалось ли преобразование (корректны ли входные данные).
		/// </summary>
		/// <param name="input"> Считываемая переменная. </param>
		/// <param name="readIn"> Переменная булевого типа, отражающая корректность вводных данных для переменной. </param>
		/// <returns> In - считываемую переменную. /returns>

		static uint Read(out bool readIn)
		{
			uint input;
			readIn = uint.TryParse(Console.ReadLine(), out input);
			return input;
		}

		/// <summary>
		/// Объявляются переменные для количества учеников, способа транспортировки, ответа и проверки правильности ввода, далее вызывается
		/// метод считывания для количества учеников, проводится проверка правильности данных, если все верно, в цикле for считывается
		/// способ транспортировки для каждого ученика и в зависимости от типа транспортировки в операторе switch case реализуются решения
		/// для разных случаев и вывод данных. Если в какой-то момент вводятся некорректные данные, выводится строка wrong и работа программы 
		/// завершается.
		/// </summary>

		static void Main(string[] args)
		{
			// Переменная целого беззнакового типа для количества учеников, едущих на посвят.

			uint numberOfStudents;

			// Переменные строкового типа для способа перемещения и ответа.

			string transportation, result;

			// Переменная булевого типа для проверки корректности ввода числа учеников.

			bool readNumber;


			// Вызов метода чтения для переменной количества учеников.

			numberOfStudents = Read(out readNumber);

			// Проверка корректности данных: число учеников - целое от 1 до 100000.

			if (readNumber && numberOfStudents > 0 && numberOfStudents < 100001)
			{
				// В цикле for от 0 до количества учеников считывается способ перемещения для каждого.

				for (int i = 0; i < numberOfStudents; i++)
				{
					// Вызов чтения для переменной способа перемещения.

					transportation = Console.ReadLine();

					// В оператора switch case в зависимости от способа перемещения выводятся или вызываются различные данные и методы.

					switch (transportation)
					{

						// Если ученик не едет на посвят, не выводится ничего.

						case "none":
							break;

						// Если ученик едет на автобусе, выводится 3 - 2 купюры по 500р и одна на 200р.

						case "bus":
							Console.WriteLine("3");
							break;

						// Если ученик едет на такси, вызывается метод рассчета количества купюр для перемещения на такси, считывающий цену,
						// проверающий корректность данных и возвращающий количество купюр или строку wrong, далее ответ выводится и, если 
						// данные были неверны, программа завершает работу.

						case "taxi":

							// Вызов метода рассчета количества купюр.

							TaxiBanknotes(out result);

							// Вывод результата.

							Console.WriteLine($"{result}");

							// Если результат равен "wrong", значит данные были неверны. В таком случае программа завершает работу.

							if (result == "wrong")
							{
								Environment.Exit(0);
							}
							break;

						// Если тип транспортировки введен неверно, выводится строка wrong и работа программы завершается.

						default:
							Console.WriteLine("wrong");
							Environment.Exit(0);
							break;
					}
				}
			}
			else
			{
				// Если количество учеников введено неверно, выводится строка wrong и работа программы завершается.

				Console.WriteLine("wrong");
			}
		}
	}
}
