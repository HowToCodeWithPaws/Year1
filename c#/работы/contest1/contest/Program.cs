using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//Определите тип треугольника (остроугольный, тупоугольный, прямоугольный) с данными сторонами.
//Даны три натуральных числа – стороны треугольника.
//В случае, если входные данные не соответствуют условию, выведите строку wrong и сразу же завершите
//выполнение программы.Необходимо вывести одно из слов: right для прямоугольного треугольника, 
//acute для остроугольного треугольника, obtuse для тупоугольного треугольника или impossible, если 
//входные числа не образуют треугольника.
namespace Sem3
{
	class Program
	{
		/// <summary>
		/// метод ищет самую длинную сторону треугольника, присваивая значения сторон a, b и c переменным 
		/// "самая длинная сторона", "вторая сторона" и "третья сторона" в зависимости от выполнения условий
		/// (проверяются без условного оператора if с помощью тернарного оператора для каждой переменной.
		/// Далее возвращает значение самой длинной, второй и третьей сторон, чтобы можно было проверить 
		/// прямо/тупо/остроугольность треугольника.
		/// </summary>
		/// <param name="a"> Первая сторона. </param>
		/// <param name="b"> Вторая сторона. </param>
		/// <param name="c"> Третья сторона. </param>
		/// <param name="MaxSide"> "Самая длинная сторона". </param>
		/// <param name="SecondSide"> "Вторая сторона". </param>
		/// <param name="ThirdSide"> "Третья сторона". </param>
		static void FindMaxSide(uint a, uint b, uint c, out uint MaxSide, out uint SecondSide, out uint ThirdSide)
		{
			// Присваивание для каждого из трех случаев: a - большая сторона, b - большая сторона, c - большая
			// сторона и a=b=c.
			MaxSide = (a >= b && a >= c) ? a : ((b >= a && b >= c) ? b : ((c >= b && c >= a) ? c : ((a == b && b == c) ? a : 0)));
			SecondSide = (a >= b && a >= c) ? b : ((b >= a && b >= c) ? a : ((c >= b && c >= a) ? b : ((a == b && b == c) ? b : 0)));
			ThirdSide = (a >= b && a >= c) ? c : ((b >= a && b >= c) ? c : ((c >= b && c >= a) ? a : ((a == b && b == c) ? c : 0)));
		}
		/// <summary>
		/// Метод получает на вход три числа, далее вызывает метод, ищущий самое большое из трех вводимых чисел,
		/// затем с помощью тернарного оператора проверяет для них выполнение неравенства треугольника: если не 
		/// выполняется - присваивает переменной result ответ impossible, иначе проверяет (с помощью тернарного
		/// оператора) неравенства квадратов сторон и в зависимости от выполняющегося присваивает переменной 
		/// result ответ right(прямоугольный), acute(остроугольный) или obtuse(тупоугольный) и возвращает эту 
		/// переменную в точку вызова.
		/// </summary>
		/// <param name="a"> Первое число. </param>
		/// <param name="b"> Второе число. </param>
		/// <param name="c"> Третье число. </param>
		/// <param name="result"> Переменная для ответа. </param>
		static void Triangle(uint a, uint b, uint c, out string result)
		{
			// Переменные для нахождения самой длинной потенциальной стороны.
			uint MaxSide, SecondSide, ThirdSide;
			// Вызов метода, ищущего самую длинную потенциальную сторону.
			FindMaxSide(a, b, c, out MaxSide, out SecondSide, out ThirdSide);

			// Проверка выполнения неравенств и пррисваивание значений переменной для ответа в зависимости от них.
			result = ((a < (b + c)) && (b < (a + c)) && (c < (a + b))) ? 
				(MaxSide * MaxSide == SecondSide * SecondSide + ThirdSide * ThirdSide) ? "right" : 
				((MaxSide * MaxSide < SecondSide * SecondSide + ThirdSide * ThirdSide) ? "acute" : "obtuse") 
				: "impossible";
		}
		/// <summary>
		/// Метод считывает строку и пытается преобразовать ее переменную целочисленного типа
		/// с помощью метода TryParse, возвращает значение переменной и переменную булевого типа, показывающую,
		/// удалось ли преобразование (корректны ли входные данные).
		/// </summary>
		/// <param name="In"> Считываемая переменная. </param>
		/// <param name="ReadIn"> Переменная булевого типа, отражающая корректность вводных данных для переменной. </param>
		static uint Read(out bool ReadIn)
		{
			uint In;
			ReadIn = uint.TryParse(Console.ReadLine(), out In);
			return In;
		}
		/// <summary>
		/// Объявляются переменные для потенциальных сторон треугольника, для первой вызывается метод чтения,
		/// происходит проверка корректности вводимых данных(без условного оператора if с помощью switch case): 
		/// если вводимое не преобразуется в целое число или не является натуральным, программа выводит строку 
		/// wrong и завершает работу, иначе вызывается метод считывания следующей переменной (с такой же проверкой).
		/// Если все введенные числа удовлетворяют условию, вызывается метод проверки неравенства треугольника для
		/// этих чисел, он возвращает строку с ответом, который выводится.
		/// </summary>
		static void Main(string[] args)
		{
			// Переменные - 3 натуральных числа.
			uint Side1, Side2, Side3;
			// Переменные типа bool для проверки правильности вводимых данных.
			bool Read1, Read2, Read3;
			// Переменная для выводимого результата.
			string result;

			// Вызов метода чтения данных с консоли.
			Side1 = Read(out Read1);

			// Проверка корректности вводимых данных.
			switch (!Read1 || Side1 < 1)
			{
				case true:
					// Вывод строки wrong и завершение работы программы.
					Console.WriteLine("wrong");
					break;
				case false:

					// Вызов метода чтения данных с консоли.
					Side2 = Read(out Read2);

					// Проверка корректности вводимых данных.
					switch (!Read2 || Side2 < 1)
					{
						case true:
							// Вывод строки wrong и завершение работы программы.
							Console.WriteLine("wrong");
							break;

						case false:
							// Вызов метода чтения данных с консоли.
							Side3 = Read(out Read3);

							// Проверка корректности вводимых данных.
							switch (!Read3 || Side3 < 1)
							{
								case true:
									// Вывод строки wrong и завершение работы программы.
									Console.WriteLine("wrong");
									break;
								case false:
									// Вызов метода проверки неравенства треугольника.
									Triangle(Side1, Side2, Side3, out result);
									// Выходные данные.
									Console.WriteLine($"{result}");
									break;
							}
							break;
					}
					break;
			}

		}
	}
}

