using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//По данному действительному числу a и натуральному n вычислите сумму 1+a+a2+...+an, не используя 
//формулу суммы геометрической прогрессии. Время работы программы должно быть пропорционально n.
//Вводятся 2 числа - a и n. Необходимо вывести значение суммы геометрической прогрессии c точностью не 
//менее трёх знаков после запятой.

namespace Task6
{
	class Program
	{
		/// <summary>
		/// Метод вычисляет сумму слагаемых вида A в степени от 1 до N (единица присвоена переменной ответа
		/// изначально), прибавляя каждое новое слагаемое к переменной ответа (принимается и возаращается
		/// через ref) в цикле for и осуществляя пересчет степени в том же цикле, затем возвращает значение ответа
		/// в точку вызова.
		/// </summary>
		/// <param name="NPower"> Вводимое число - верхняя граница показателя степени. </param>
		/// <param name="AToPower"> Вводимое число - основание степени. </param>
		/// <param name="result"> Переменная для ответа. </param>
		static void FuncPower(uint NPower, double AToPower, ref double result)
		{
			// Объявляется и инициализируется переменная для слагаемого - число AToPower в степени, 
			// пересчитываемой на каждом шаге (от 1 до NPower).
			double PreviousPower = 1;
			for (uint i = 1; i <= NPower; i++)
			{
				result += PreviousPower * AToPower;
				PreviousPower = PreviousPower * AToPower;
			}
		}
		/// <summary>
		/// Метод считывает строку и пытается преобразовать ее переменную натурального типа
		/// с помощью метода TryParse, возвращает значение переменной и переменную булевого типа, показывающую,
		/// удалось ли преобразование (корректны ли входные данные).
		/// </summary>
		/// <param name="In"> Считываемая переменная. </param>
		/// <param name="ReadIn"> Переменная булевого типа, отражающая корректность вводных данных для переменной. </param>
		static uint ReadUint(out bool ReadIn)
		{
			uint In;
			ReadIn = uint.TryParse(Console.ReadLine(), out In);
			return In;
		}
		/// <summary>
		/// Метод считывает строку и пытается преобразовать ее переменную вещественного типа
		/// с помощью метода TryParse, возвращает значение переменной и переменную булевого типа, показывающую,
		/// удалось ли преобразование (корректны ли входные данные).
		/// </summary>
		/// <param name="In"> Считываемая переменная. </param>
		/// <param name="ReadIn"> Переменная булевого типа, отражающая корректность вводных данных для переменной. </param>
		static double ReadDouble(out bool ReadIn)
		{
			double In;
			ReadIn = double.TryParse(Console.ReadLine(), out In);
			return In;
		}
		/// <summary>
		/// Объявляются переменные для основания и показателя степени, вызывается метод считывания, осуществляется
		/// проверка корректности вводимых данных (данные преобразуются в вещественное число) в условном операторе 
		/// с помощью результатов работы метода TryParse, если данные некорректны, программа завершает работу, 
		/// иначе вызывает метод чтения следующей переменной и проверка корректности данных для нее(натуральное
		/// число), если данные неверны - программа завершает работу, иначе вызывается метод рассчета выражения
		/// суммы слагаемых (числа А возведенного в степени от 0 до N), возвращающий новое
		/// значение переменной ответа, затем выводится ответ с точностью 3 знака после запятой.
		/// </summary>
		static void Main(string[] args)
		{
			// Переменная целого беззнакового типа для вводимого числа - показателя степени.
			uint NPower;
			// Переменная вещественного типа для вводимого числа - основания степени.
			double AToPower;
			// Переменная булевого типа для проверки правильности вводимых данных.
			bool ReadN, ReadA;
			// Переменная для ответа типа double для соблюдения требований к точности.
			double result = 1;

			// Вызов метода чтения входных данных.
			AToPower = ReadDouble(out ReadA);

			// Проверка корректности ввода данных.
			if (ReadA)
			{
				// Вызов метода чтения входных данных.
				NPower = ReadUint(out ReadN);

				// Проверка корректности ввода данных (NPower должно быть натуральным числом).
				if (ReadN && (NPower >= 1))
				{
					// Вызов метода рассчета суммы AToPower возведенного в степень от 1 до NPower.
					FuncPower(NPower, AToPower, ref result);
					// Выходные данные(3 знака после запятой).
					Console.WriteLine($"{result:0.###}");
				}
			}
		}
	}
}
