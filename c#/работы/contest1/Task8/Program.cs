using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//Представьте данное число n в виде суммы двух кубов.Программа получает на вход одно натуральное число n(n <= 1028).
//В случае, если входные данные не соответствуют условию, выведите строку wrong и сразу же завершите выполнение 
//программы. Программа должна вывести 2 целых неотрицательных числа в порядке невозрастания, сумма кубов которых 
//равна n.Если это невозможно, выведите строку impossible.
namespace Task8
{
	class Program
	{
		/// <summary>
		/// Метод принимает на вход число и для него проверяет возможность разложения на сумму кубов двух 
		/// натуральных чисел с помощью циклов for для перебора возможных комбинаций двух чисел, затем с помощью
		/// тернарного оператора присваивается новое значение переменной ответа: если разложение возможно, строка
		/// ответа будет состоять из двух чисел в порядке невозрастания, иначе она останется неизмененной 
		/// (дефолтное значение impossible). Строка ответа далее возвращается в точку вызова через ref.
		/// </summary>
		/// <param name="Number"> Проверяемое число. </param>
		/// <param name="result"> Переменная для вывода ответа. </param>
		static void SummCheck(uint Number, ref string result)
		{
			// Переменные для двух чисел, сумма кубов которых должна равняться вводимому числу.
			uint FirstForCube, SecondForCube;

			// Происходит перебор для каждого возможного первого числа (от 0 до 10) всех возможных вариантов второго
			// тоже от 0 до 10 (11 выбрано верхней границей потому, что 11 в кубе = 1331 > 1028, в то время как 10
			// в кубе = 1000 < 1028.
			for (FirstForCube = 0; FirstForCube < 11; FirstForCube++)
			{
				for (SecondForCube = 0; SecondForCube < 11; SecondForCube++)
				{
					// Если для какого-либо сочетания таких чисел сумма их куба равна проверяемому числу, 
					// переменной ответа присваивается новое значения и перебор заканчивается.
					if (FirstForCube * FirstForCube * FirstForCube + SecondForCube * SecondForCube * SecondForCube == Number)
					{
						// Ответ выводится как строка из невозрастающей последовательности двух чисел, поэтому
						// проверяется, какое число больше.
						result = (FirstForCube >= SecondForCube) ? $"{FirstForCube} {SecondForCube}" : $"{SecondForCube} {FirstForCube}";
						return;
					}
				}
			}
		}

		/// <summary>
		/// Метод считывает строку и пытается преобразовать ее переменную целочисленного беззнакового типа
		/// с помощью метода TryParse, возвращает значение переменной и переменную булевого типа, показывающую,
		/// удалось ли преобразование (корректны ли входные данные).
		/// </summary>
		/// <param name="In"> Считываемая переменная. </param>
		/// <param name="ReadIn"> Переменная булевого типа, отражающая корректность вводных данных для переменной. </param>
		static uint Read(out bool ReadIn)
		{
			uint In;
			ReadIn = uint.TryParse(Console.ReadLine(), out In);
			return In;
		}

		/// <summary>
		/// Объявляется переменная - считываемое число, которое надо разложить на сумму двух кубов, вызывается 
		/// метод чтения с консоли, выполняется проверка корректности вводимых данных методом switch case (число
		/// от 1 до 1028), если данные неверны, программа выводит строку wrong и завершает работу, иначе 
		/// вызывается метод, раскладывающий число на сумму кубов или проверяющий невозможность этого, возвращающий
		/// через ref новое значение переменной ответа, далее ответ выводится.
		/// </summary>
		static void Main(string[] args)
		{
			// Переменная - натуральное число от 1 до 1028, которое надо разложить на сумму кубов.
			uint IsItTheSumm;
			// Переменная типа bool для проверки правильности вводимых данных.
			bool ReadInput;
			// Переменная для выводимого результата с дефолтным значением impossible.
			string result = "impossible";

			// Вызов метода чтения данных с консоли.
			IsItTheSumm = Read(out ReadInput);

			// Проверка корректности вводимых данных.
			switch (!ReadInput || IsItTheSumm < 1 || IsItTheSumm > 1028)
			{
				case true:
					// Вывод строки wrong и завершение работы программы.
					Console.WriteLine("wrong");
					break;

				case false:
					// Вызов метода перевода числа в римские цифры.
					SummCheck(IsItTheSumm, ref result);
					// Выходные данные.
					Console.WriteLine($"{result}");
					break;
			}
		}
	}
}
