using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//По данному натуральному числу N найдите сумму чисел 1\1+1\2!+1\3!+...+1\N!. Количество действий должно 
//быть пропорционально N.Необходимо вывести результат вычисления в виде действительного числа c точностью
//до 5 знаков после запятой.

namespace Task7
{
	class Program
	{
		/// <summary>
		/// Метод вычисляет значение выражения для вводимого числа InputN в цикле for от 1 до InputN, прибавляя
		/// к значению переменной ответа новое слагаемое, в котором на каждой итерации пересчитывается значение
		/// факториала в знаменателе, затем возвращает значение ответа в точку вызова через ref.
		/// </summary>
		/// <param name="InputN"> Переменная для вводимого числа. </param>
		/// <param name="result"> Переменная для ответа. </param>
		static void FuncFactorial(uint InputN, ref double result)
		{
			// Объявляется и инициализируется переменная для знаменателя - факториал, пересчитываемый на каждом шаге.
			double Divider = 1;
			for (uint i = 1; i <= InputN; i++)
			{
				result += 1 / (i * Divider);
				Divider = i * Divider;
			}
		}
		/// <summary>
		/// Метод считывает строку и пытается преобразовать ее переменную целочисленного типа
		/// с помощью метода TryParse, возвращает значение переменной и переменную булевого типа, показывающую,
		/// удалось ли преобразование (корректны ли входные данные).
		/// </summary>
		/// <param name="In"> Считываемая переменная. </param>
		/// <param name="ReadIn"> Переменная булевого типа, отражающая корректность вводных данных для переменной. </param>
		static uint Read(out bool ReadIn)
		{
			uint In;
			ReadIn = uint.TryParse(Console.ReadLine(), out In);
			return In;
		}
		/// <summary>
		/// Объявляется переменная для вводимого числа, вызывается метод считывания, осуществляется проверка
		/// корректности вводимых данных (данные преобразуются в натуральное число) в условном операторе с 
		/// помощью результатов работы метода TryParse, если данные некорректны, программа выводит строку
		/// wrong и завершает работу, иначе вызывает метод рассчета данного выражения, возвращающий новое
		/// значение переменной ответа, затем выводится ответ с точностью 5 знаков после запятой.
		/// </summary>
		static void Main(string[] args)
		{
			// Переменная целого беззнакового типа для вводимого числа.
			uint InputN;
			// Переменная булевого типа для проверки правильности вводимых данных.
			bool ReadN;
			// Переменная для ответа типа double для соблюдения требований к точности.
			double result = 1;

			// Вызов метода чтения входных данных.
			InputN = Read(out ReadN);

			// Проверка корректности ввода данных (InputN должно быть целым числом и InputN>0).
			if (ReadN && (InputN >= 1))
			{
				// Вызов метода рассчета выражения от числа InputN.
				FuncFactorial(InputN, ref result);
				// Выходные данные(5 знаков после запятой).
				Console.WriteLine($"{result:0.#####}");
			}
		}
	}
}
