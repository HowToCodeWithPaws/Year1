using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// Дано натуральное число A>1 . Определите, каким по счету числом Фибоначчи оно является, то есть выведите 
// такое число n, что  фн= A. Если A не является числом Фибоначчи, выведите число -1.

namespace Task10
{
	class Program
	{
		/// <summary>
		/// Метод получает число, для которого надо проверить, является ли оно элементом последовательности 
		/// Фибоначчи, рассчитывает элемент последовательности в цикле whilе, пока текущий элемент меньше
		/// проверяемого числа, затем присваивает значение переменной для ответа, получаемой и выводимой через
		/// ref в зависимости от того, является ли проверяемое число членом последовательности (тогда result = 
		/// номеру числа в последовательности) или последовательность перескакивает через это число (-1).
		/// </summary>
		/// <param name="Input"> Проверяемое число. </param>
		/// <param name="result"> Переменная для ответа. </param>

		static void Fibonacci(ulong Input, ref int result)
		{
			// Переменная для номера текущего элемента последовательности.

			int i = 1;

			// Переменная для элемента перед перед текущим (n-2).

			ulong n1 = 0;

			// Переменная для элемента перед текущим (n-1).

			ulong n2 = 1;

			// Переменная для текущего элемента (n).

			ulong Next = 0;


			// Происходит рассчет последовательности, пока новый ее элемент меньше проверяемого числа, на каждой
			// итерации увеличивается номер текущего элемента.

			while (Next < Input)
			{
				Next = n1 + n2;
				n1 = n2;
				n2 = Next;
				i += 1;
			}

			// Присваивание значения переменной ответа: если ближайшее снизу число Фибоначчи равно проверяемому
			// числу, ответ равен номеру этого числа в последовательности, иначе -1.

			result = (Next == Input) ? i : -1;
		}

		/// <summary>
		/// Метод считывает строку и пытается преобразовать ее переменную целочисленного беззнакового типа
		/// с помощью метода TryParse, возвращает значение переменной и переменную булевого типа, показывающую,
		/// удалось ли преобразование (корректны ли входные данные).
		/// </summary>
		/// <param name="In"> Считываемая переменная. </param>
		/// <param name="ReadIn"> Переменная булевого типа, отражающая корректность вводных данных для переменной. </param>

		static ulong Read(out bool ReadIn)
		{
			ulong In;
			ReadIn = ulong.TryParse(Console.ReadLine(), out In);
			return In;
		}

		/// <summary>
		/// Объявляется переменная для входящих данных, вызывается метод чтения с консоли с проверкой 
		/// корректности введенных данных с помощью условного оператора и метода TryParse: если данные 
		/// некорректны, программа выводит строку wrong и завершает работу, иначе вызывается метод, проверяющий,
		/// является ли число элементом последовательности Фибоначчи, и возвращающий значение переменной для ответа,
		/// которая далее выводится.
		/// </summary>

		static void Main()
		{
			// Переменная целого беззнакового типа для вводимого числа.

			ulong InputA;

			// Переменная булевого типа для проверки правильности вводимых данных.

			bool ReadA;

			// Переменная для ответа.

			int result = -1;


			// Вызов метода чтения входных данных.

			InputA = Read(out ReadA);


			// Проверка корректности ввода данных (А должно быть целым числом и А>1).

			if (!ReadA || InputA <= 1)
			{
				// Вывод строки wrong и завершение работы программы.

				Console.WriteLine("wrong");
			}
			else
			{
				// Вызов метода проверки, является ли число элементом последовательности Фибоначчи.

				Fibonacci(InputA, ref result);

				// Выходные данные.

				Console.WriteLine($"{result}");
			}
		}
	}
}
